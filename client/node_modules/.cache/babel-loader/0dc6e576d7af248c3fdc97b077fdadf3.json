{"ast":null,"code":"import _regeneratorRuntime from \"/etc/opt/streams/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport streams from '../apis/streams';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM } from './types';\nexport var signIn = function signIn(userId) {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport var createStreams = function createStreams(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return streams.post('/streams', formValues);\n\n              case 2:\n                response = _context.sent;\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchStreams = function fetchStreams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.post('/streams');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: FETCH_STREAMS,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchStream = function fetchStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: FETCH_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var editStream = function editStream(id, formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return streams.put(\"/streams/\".concat(id), formValues);\n\n              case 2:\n                response = _context4.sent;\n                dispatch({\n                  type: EDIT_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var deleteStream = function deleteStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return streams.delete(\"/streams/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: DELETE_STREAM\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/etc/opt/streams/client/src/actions/index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","signIn","userId","type","payload","signOut","createStreams","formValues","dispatch","post","response","data","fetchStreams","fetchStream","id","get","editStream","put","deleteStream","delete"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SACEC,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,aANF,EAOEC,WAPF,QAQO,SARP;AAUA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,MAAM,EAAI;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAET,OADD;AAELU,IAAAA,OAAO,EAACF;AAFH,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACjBf,OAAO,CAACgB,IAAR,CAAa,UAAb,EAAwBF,UAAxB,CADiB;;AAAA;AACnCG,gBAAAA,QADmC;AAEzCF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAEP,aAAP;AAAqBQ,kBAAAA,OAAO,EAACM,QAAQ,CAACC;AAAtC,iBAAD,CAAR;;AAFyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;AAKP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAMJ,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACRf,OAAO,CAACgB,IAAR,CAAa,UAAb,CADQ;;AAAA;AAC1BC,gBAAAA,QAD0B;AAEhCF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAEN,aAAP;AAAqBO,kBAAAA,OAAO,EAACM,QAAQ,CAACC;AAAtC,iBAAD,CAAR;;AAFgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAKP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMN,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACPf,OAAO,CAACsB,GAAR,oBAAwBD,EAAxB,EADO;;AAAA;AACzBJ,gBAAAA,QADyB;AAE/BF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAEL,YAAP;AAAoBM,kBAAAA,OAAO,EAACM,QAAQ,CAACC;AAArC,iBAAD,CAAR;;AAF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAKP,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACF,EAAD,EAAIP,UAAJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAmB,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACnBf,OAAO,CAACwB,GAAR,oBAAwBH,EAAxB,GAA6BP,UAA7B,CADmB;;AAAA;AACrCG,gBAAAA,QADqC;AAE3CF,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAEH,WAAP;AAAmBI,kBAAAA,OAAO,EAACM,QAAQ,CAACC;AAApC,iBAAD,CAAR;;AAF2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAKP,OAAO,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAAAJ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAI,kBAAMN,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC1Bf,OAAO,CAAC0B,MAAR,oBAA2BL,EAA3B,EAD0B;;AAAA;AAEhCN,gBAAAA,QAAQ,CAAC;AAACL,kBAAAA,IAAI,EAAEJ;AAAP,iBAAD,CAAR;;AAFgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import streams from '../apis/streams';\nimport {\n  SIGN_IN,\n  SIGN_OUT,\n  CREATE_STREAM,\n  FETCH_STREAMS,\n  FETCH_STREAM,\n  DELETE_STREAM,\n  EDIT_STREAM\n} from './types';\n\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload:userId\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\n\nexport const createStreams = formValues => async dispatch => {\n  const response  = await streams.post('/streams',formValues);\n  dispatch({type: CREATE_STREAM,payload:response.data})\n};\n\nexport const fetchStreams = () => async dispatch => {\n  const response  = await streams.post('/streams');\n  dispatch({type: FETCH_STREAMS,payload:response.data})\n};\n\nexport const fetchStream = id => async dispatch => {\n  const response  = await streams.get(`/streams/${id}`);\n  dispatch({type: FETCH_STREAM,payload:response.data})\n};\n\nexport const editStream = (id,formValues) => async dispatch => {\n  const response  = await streams.put(`/streams/${id}`,formValues);\n  dispatch({type: EDIT_STREAM,payload:response.data})\n};\n\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({type: DELETE_STREAM})\n};"]},"metadata":{},"sourceType":"module"}