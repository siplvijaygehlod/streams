{"ast":null,"code":"import _classCallCheck from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/etc/opt/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n\n    /* This is helper functoin for Field's component props\n    which holds formProps param by-default and this is object.\n    Currently we are destructing our input object from formProps.\n    */\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label;\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onsubmit),\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n/* reduxForm returns a functoin and we \nimmediately pass that function to class StreamCreate */\n\n\nexport default reduxForm({\n  form: 'streamCreate'\n})(StreamCreate);","map":{"version":3,"sources":["/etc/opt/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","input","label","props","handleSubmit","onsubmit","renderInput","Component","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;;AAOA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IACMC,Y;;;;;;;;;;;;;;AACJ;;;;sCAI6B;AAAA,UAAfC,KAAe,QAAfA,KAAe;AAAA,UAARC,KAAQ,QAARA,KAAQ;AAC3B,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KADH,CADF,EAIE,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF,CADF;AAQD;;;6BAGS;AACR,aACE;AAAM,QAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,QAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAME,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF;AASD;;;;EA3BwBT,KAAK,CAACU,S;AA8BjC;;;;AAEA,eAAeR,SAAS,CAAC;AACvBS,EAAAA,IAAI,EAAE;AADiB,CAAD,CAAT,CAEZR,YAFY,CAAf","sourcesContent":["import React from 'react'\n\n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form'\nclass StreamCreate extends React.Component {\n  /* This is helper functoin for Field's component props\n  which holds formProps param by-default and this is object.\n  Currently we are destructing our input object from formProps.\n  */\n  renderInput ({input, label}) {\n    return (\n      <div className='field'>\n        <label>\n          {label}\n        </label>\n        <input {...input} />\n      </div>\n    )\n  }\n\n  \n  render () {\n    return (\n      <form onSubmit={this.props.handleSubmit(this.onsubmit)} className='ui form'>\n        {/* name props in field is for manage the form field\n            and it is required props for field and all the props are send\n            to helper function by component */}\n        \n        <Field name='title' component={this.renderInput} label='Enter Title' />\n        <Field name='description' component={this.renderInput} label='Enter Description' />\n      </form>)\n  }\n}\n\n/* reduxForm returns a functoin and we \nimmediately pass that function to class StreamCreate */\nexport default reduxForm({\n  form: 'streamCreate'\n})(StreamCreate)\n"]},"metadata":{},"sourceType":"module"}