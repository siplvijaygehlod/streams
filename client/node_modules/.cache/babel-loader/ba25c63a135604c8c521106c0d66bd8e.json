{"ast":null,"code":"import _classCallCheck from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/etc/opt/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    _classCallCheck(this, StreamCreate);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(StreamCreate).apply(this, arguments));\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderInput\",\n\n    /* This is helper functoin for Field's component props\n    which holds formProps param by-default and this is object.\n    Currently we are destructing our input object from formProps.\n    */\n    value: function renderInput(_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), thi);\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(formValues) {\n      console.log(formValues);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (\n        /* this.props.handleSubmit() auto call the preventDefault\n         */\n        React.createElement(\"form\", {\n          onSubmit: this.props.handleSubmit(this.onSubmit),\n          className: \"ui form\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(Field, {\n          name: \"title\",\n          component: this.renderInput,\n          label: \"Enter Title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }), React.createElement(Field, {\n          name: \"description\",\n          component: this.renderInput,\n          label: \"Enter Description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"ui button primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Submit\"))\n      );\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"no title!!!\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"no description!!!\";\n  }\n\n  return errors;\n};\n/* reduxForm returns a functoin and we \nimmediately pass that function to class StreamCreate */\n\n\nexport default reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["/etc/opt/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","StreamCreate","input","label","meta","thi","formValues","console","log","props","handleSubmit","onSubmit","renderInput","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;;AAOA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IACMC,Y;;;;;;;;;;;;;;AACJ;;;;sCAIkC;AAAA,UAApBC,KAAoB,QAApBA,KAAoB;AAAA,UAAbC,KAAa,QAAbA,KAAa;AAAA,UAAPC,IAAO,QAAPA,IAAO;AAChC,aACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,KADH,CADF,EAIE,+CAAWD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF,EAKGG,GALH,CADF;AASD;;;6BAEQC,U,EAAW;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACD;;;6BAES;AACR;AACE;;AAEA;AAAM,UAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,YAAX,CAAwB,KAAKC,QAA7B,CAAhB;AAAwD,UAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAE,KAAKC,WAApC;AAAiD,UAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,EAME,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,aAAZ;AAA0B,UAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,UAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANF,EAOE;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAHF;AAYD;;;;EAlCwBd,KAAK,CAACe,S;;AAqCjC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAR,UAAU,EAAI;AAC7B,MAAMS,MAAM,GAAG,EAAf;;AACA,MAAG,CAACT,UAAU,CAACU,KAAf,EAAqB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,aAAf;AACD;;AAED,MAAG,CAACV,UAAU,CAACW,WAAf,EAA2B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,mBAArB;AACD;;AACD,SAAOF,MAAP;AACD,CAVD;AAYA;;;;AAEA,eAAef,SAAS,CAAC;AACvBkB,EAAAA,IAAI,EAAE,cADiB;AAEvBJ,EAAAA,QAAQ,EAARA;AAFuB,CAAD,CAAT,CAGZb,YAHY,CAAf","sourcesContent":["import React from 'react'\n\n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form'\nclass StreamCreate extends React.Component {\n  /* This is helper functoin for Field's component props\n  which holds formProps param by-default and this is object.\n  Currently we are destructing our input object from formProps.\n  */\n  renderInput ({input, label,meta}) {\n    return (\n      <div className='field'>\n        <label>\n          {label}\n        </label>\n        <input {...input} />\n        {thi}\n      </div>\n    )\n  }\n\n  onSubmit(formValues){\n    console.log(formValues)\n  }\n\n  render () {\n    return (\n      /* this.props.handleSubmit() auto call the preventDefault\n       */\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form'>\n        {/* name props in field is for manage the form field\n            and it is required props for field and all the props are send\n            to helper function by component */}\n        \n        <Field name='title' component={this.renderInput} label='Enter Title' />\n        <Field name='description' component={this.renderInput} label='Enter Description' />\n        <button className=\"ui button primary\" >Submit</button>\n      </form>)\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n  if(!formValues.title){\n    errors.title = \"no title!!!\";\n  }\n\n  if(!formValues.description){\n    errors.description = \"no description!!!\";\n  }\n  return errors;\n};\n\n/* reduxForm returns a functoin and we \nimmediately pass that function to class StreamCreate */\nexport default reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate)\n"]},"metadata":{},"sourceType":"module"}