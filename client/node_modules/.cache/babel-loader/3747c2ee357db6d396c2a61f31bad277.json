{"ast":null,"code":"import _classCallCheck from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/etc/opt/streams/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/etc/opt/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamCreate, _React$Component);\n\n  function StreamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.createStream(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamCreate, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, error));\n      }\n    }\n    /* This is helper functoin for Field's component props\n    which holds formProps param by-default and this is object.\n    Currently we are destructing our input object from formProps.\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (\n        /* this.props.handleSubmit() auto call the preventDefault\n         */\n        React.createElement(\"form\", {\n          onSubmit: this.props.handleSubmit(this.onSubmit),\n          className: \"ui form error\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, React.createElement(Field, {\n          name: \"title\",\n          component: this.renderInput,\n          label: \"Enter Title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), React.createElement(Field, {\n          name: \"description\",\n          component: this.renderInput,\n          label: \"Enter Description\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"ui button primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, \"Submit\"))\n      );\n    }\n  }]);\n\n  return StreamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"no title!!!\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"no description!!!\";\n  }\n\n  return errors;\n};\n/* reduxForm returns a functoin and we \nimmediately pass that function to class StreamCreate */\n\n\nvar formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream: createStream\n})(formWrapped);","map":{"version":3,"sources":["/etc/opt/streams/client/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","Field","reduxForm","StreamCreate","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","props","handleSubmit","Component","validate","errors","title","description","formWrapped","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA4B,eAA5B;AAEA;;;;;;;AAOA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Y;;;;;;;;;;;;;;;;;;UAgBJC,W,GAAc,gBAAyB;AAAA,UAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,UAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,UAAVC,IAAU,QAAVA,IAAU;AACrC,UAAMC,SAAS,mBAAWD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAlD,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,KADH,CADF,EAIE,+CAAWD,KAAX;AAAmB,QAAA,YAAY,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF,EAKG,MAAKM,WAAL,CAAiBJ,IAAjB,CALH,CADF;AASD,K;;UAEDK,Q,GAAW,UAAAC,UAAU,EAAI;AACvB,YAAKC,KAAL,CAAWd,YAAX,CAAwBa,UAAxB;AACD,K;;;;;;;uCA7B2B;AAAA,UAAfJ,KAAe,SAAfA,KAAe;AAAA,UAATC,OAAS,SAATA,OAAS;;AAC1B,UAAGA,OAAO,IAAID,KAAd,EAAoB;AAClB,eACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,KAAzB,CADF,CADF;AAKD;AACF;AAED;;;;;;;6BAqBU;AACR;AACE;;AAEA;AAAM,UAAA,QAAQ,EAAE,KAAKK,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CAAhB;AAAwD,UAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,UAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,EAME,oBAAC,KAAD;AAAO,UAAA,IAAI,EAAC,aAAZ;AAA0B,UAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,UAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANF,EAOE;AAAQ,UAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAHF;AAYD;;;;EA9CwBN,KAAK,CAACkB,S;;AAiDjC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAJ,UAAU,EAAI;AAC7B,MAAMK,MAAM,GAAG,EAAf;;AACA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAqB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,aAAf;AACD;;AAED,MAAG,CAACN,UAAU,CAACO,WAAf,EAA2B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,mBAArB;AACD;;AACD,SAAOF,MAAP;AACD,CAVD;AAYA;;;;AAEA,IAAMG,WAAW,GAAKnB,SAAS,CAAC;AAC9BoB,EAAAA,IAAI,EAAE,cADwB;AAE9BL,EAAAA,QAAQ,EAARA;AAF8B,CAAD,CAAT,CAGnBd,YAHmB,CAAtB;AAKA,eAAeJ,OAAO,CAAC,IAAD,EAAM;AAACC,EAAAA,YAAY,EAAZA;AAAD,CAAN,CAAP,CAA6BqB,WAA7B,CAAf","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux';\nimport {createStream}  from '../../actions'\n \n/* reduxForm is the same function as we are using \ntill now using connect function and make sure that we \ncall some action creator and store data.\n\nField is a built-in react component to which \nwe are going to show on screen. */\n\nimport { Field, reduxForm } from 'redux-form'\n\nclass StreamCreate extends React.Component {\n  \n  renderError({error,touched}){\n    if(touched && error){\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  /* This is helper functoin for Field's component props\n  which holds formProps param by-default and this is object.\n  Currently we are destructing our input object from formProps.\n  */\n  renderInput = ({input, label,meta}) => {\n    const className= `field ${meta.error && meta.touched ? 'error' : '' }`;\n    return (\n      <div className={className}>\n        <label>\n          {label}\n        </label>\n        <input {...input}  autoComplete=\"off\"/>\n        {this.renderError(meta)}\n      </div>\n    )\n  }\n\n  onSubmit = formValues => {\n    this.props.createStream(formValues);\n  }\n\n  render () {\n    return (\n      /* this.props.handleSubmit() auto call the preventDefault\n       */\n      <form onSubmit={this.props.handleSubmit(this.onSubmit)} className='ui form error'>\n        {/* name props in field is for manage the form field\n            and it is required props for field and all the props are send\n            to helper function by component */}\n        \n        <Field name='title' component={this.renderInput} label='Enter Title' />\n        <Field name='description' component={this.renderInput} label='Enter Description' />\n        <button className=\"ui button primary\" >Submit</button>\n      </form>)\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n  if(!formValues.title){\n    errors.title = \"no title!!!\";\n  }\n\n  if(!formValues.description){\n    errors.description = \"no description!!!\";\n  }\n  return errors;\n};\n\n/* reduxForm returns a functoin and we \nimmediately pass that function to class StreamCreate */\nconst formWrapped =  (reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate))\n\nexport default connect(null,{createStream})(formWrapped)"]},"metadata":{},"sourceType":"module"}